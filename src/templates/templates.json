[
  {
    "title": "sample template",
    "screenshot": "/screenshots/sample.png",
    "tags": ["npm package", "config table"],
    "markdown": "# cmtu - comment utils [![NPM version](https://img.shields.io/npm/v/cmtu.svg?style=flat)](https://www.npmjs.com/package/cmtu) [![NPM monthly downloads](https://img.shields.io/npm/dm/cmtu.svg?style=flat)](https://npmjs.org/package/cmtu) [![NPM total downloads](https://img.shields.io/npm/dt/cmtu.svg?style=flat)](https://npmjs.org/package/cmtu) \r\n\r\n> cmtu - removing comments from code string has never been this easy.\r\n\r\nCmtu is a Node.js package that helps you easily remove, extract, and [magic](#cmtu-object) comments from code strings.\r\n\r\nBuilt with TypeScript and has full type support.\r\n\r\nSupports the most popular programming languages like Python, JavaScript, etc. out of the box.\r\n\r\nPlease consider following this project's author, [Sina Bayandorian](https://github.com/sina-byn), and consider starring the project to show your :heart: and support.\r\n\r\n## Table of Contents\r\n\r\n- [Install](#install)\r\n- [Usage](#usage)\r\n- [API](#api)\r\n    - [cmtu](#cmtu)\r\n    - [cmtu.stringSensitive](#cmtuStringSensitive)\r\n- [Advanced Usage - Customization](#advanced-usage)\r\n- [Interfaces](#interfaces)\r\n    - [Resolver](#resolver)\r\n    - [Built-In Languages](#built-in-languages)\r\n    - [Options](#options)\r\n    - [Cmtu Object](#cmtu-object)\r\n\r\n## Install\r\n\r\nInstall with [npm](https://www.npmjs.com/package/cmtu):\r\n\r\n```sh\r\n$ npm install --save cmtu\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nconst cmtu = require('cmtu');\r\n\r\n// * create and configure a cmtu object\r\nconst jsCmtu = cmtu(cmtu.Languages.JS.resolver);\r\nconst jsCode = `\r\n/*\r\nthis is a multi-line JS comment\r\n*/\r\n\r\nconst callout = 'this is not a comment';\r\n\r\n// this is a single line js comment\r\n`;\r\n\r\nconst codeWithNoComments = jsCmtu.strip(jsCode);\r\n\r\nconsole.log(codeWithNoComments, codeWithNoComments.length);\r\n```\r\nsee [built-in languages](#built-in-languages) for a list of all built-in languages\r\n\r\n## API\r\n\r\n### [cmtu](index.ts#L18)\r\n\r\nreturns a [`cmtu-object`](#cmtu-object) configured based on the args passed to it.\r\n\r\n**Params**\r\n* `resolver` : [`Resolver`](#resolver)\r\n\r\n* `options` : optional - [`Options`](#options)\r\n    - `stringSensitive` : `boolean | undefined`\r\n\r\n      - if set to `true` will ignore strings that include a comment based on the provided string literals\r\n\r\n    - `stringLiterals` : `string[] | undefined`\r\n\r\n      defines the list of string literals - characters that a string start and end with\r\n      - defaults to JavaScript string literals if `stringSensitive` is set to `true`\r\n      - only used when `stringSensitive` is set to `true`\r\n\r\n    - `exclude` : `RegExp[] | undefined`\r\n      - an array of regexes\r\n      - the comments that are matched by either one of these regexes are excluded from the output\r\n\r\n**Returns**\r\n* [`cmtu-object`](#cmtu-object)\r\n\r\n**Example**\r\n\r\n```js\r\n// initialize a pre-configured cmtu-object - jsCmtu\r\nconst jsCmtu = cmtu(cmtu.Languages.JS.resolver);\r\nconst jsCode = `\r\n/*\r\nthis is a multi-line JS comment\r\n*/\r\n\r\nconst callout = '// this is not a comment';\r\n\r\n// this is a single line js comment\r\n`;\r\n\r\nconst { strip, extract, magic } = jsCmtu;\r\n// in this case the callout value will be included\r\n// even though it's not an actual comment and is \r\n// a string because this instance the cmtu object\r\n// exposes methods that are not string sensitive\r\n\r\n// each of these methods is explained below\r\n// at the cmtu-object section\r\n\r\nconst comments = jsCmtu.extract(jsCode);\r\n\r\nconsole.log(comments);\r\n```\r\n\r\n### <a id=\"cmtuStringsensitive\" href=\"index.ts#L60\">cmtu.stringSensitive</a>\r\n\r\nreturns a [`cmtu-object`](#cmtu-object) configured based on the args passed to it - the difference however is that methods exposed by this [`cmtu-object`](#cmtu-object) are <u>stringSensitive</u> meaning that in the rare cases where your strings might include comments themselves, these methods can understand the difference. Take a look at the example below:\r\n\r\n**Params**\r\n* `resolver` : [`Resolver`](#resolver)\r\n\r\n* `options` : optional - [`Omit<Options, 'stringSensitive'>`](#options)\r\n    - `stringLiterals` : `string[] | undefined`\r\n    \r\n      defines the list of string literals - characters that a string start and end with\r\n      - defaults to JavaScript string literals if `stringSensitive` is set to `true`\r\n      - only used when `stringSensitive` is set to `true`\r\n\r\n    - `exclude` : `RegExp[] | undefined`\r\n      - an array of regexes\r\n      - the comments that are matched by either one of these regexes are excluded from the output\r\n\r\n**Returns**\r\n* [`cmtu-object`](#cmtu-object)\r\n\r\n**Example**\r\n\r\n```js\r\n// initialize a pre-configured cmtu-object - jsCmtu\r\nconst jsCmtu = cmtu.stringSensitive(cmtu.Languages.JS.resolver);\r\nconst jsCode = `\r\n/*\r\nthis is a multi-line JS comment\r\n*/\r\n\r\nconst callout = '// this is not a comment';\r\n\r\n// this is a single line js comment\r\n`;\r\n\r\nconst { strip, extract, magic } = jsCmtu;\r\n// in this case the callout value won't be included\r\n// as it's not an actual comment and is a comment\r\n// inside of a srting\r\n\r\n// each of these methods is explained below\r\n// at the cmtu-object section\r\n\r\nconst codeWithNoComments = jsCmtu.strip(jsCode);\r\n\r\nconsole.log(codeWithNoComments, codeWithNoComments.length);\r\n```\r\n\r\n## Advanced Usage\r\n\r\nyou can customize cmtu to use it for languages that are not part of [`cmtu.Languages`](#built-in-languages) by default, for example:\r\n\r\n```js\r\n// note that python is included in cmtu.Languages, and\r\n// this is just an example to help you understand how\r\n// to customize cmtu for your own use cases\r\n\r\nconst pyCode = `\r\n# this is a comment in python\r\ncallout = \"// this is not a comment in python\"\r\n#! python comment to be excluded\r\n`;\r\n\r\n// in order to customize the returned cmtu object\r\n// we need to pass a proper resolver for python\r\n\r\n// regex string to match python comments\r\nconst pyResolver = '#.*';\r\nconst pyStringLiterals = [\"'\", '\"', \"'''\", '\"\"\"'];\r\n\r\nconst pyCmtu = cmtu.stringSensitive(\r\n  pyResolver,\r\n  {\r\n    stringLiterals: pyStringLiterals,\r\n    exclude: [/#!.*/] // optional\r\n  }\r\n);\r\n\r\nconst { strip, extract, magic } = pyCmtu;\r\n\r\nconsole.log(extract(pyCode));\r\nconsole.log(strip(pyCode));\r\nconsole.log(magic(pyCode));\r\n```\r\n\r\n\r\n## Interfaces\r\n\r\n### [Resolver](languages.ts#L8)\r\n\r\n```typescript\r\ntype Resolver =\r\n  | string\r\n  | { block: string }\r\n  | { inline: string }\r\n  | { block: string; inline: string };\r\n```\r\n\r\n### [Built-In Languages](languages.ts#L6)\r\n\r\n```typescript\r\ntype LanguageName = 'JS' | 'CSS' | 'HTML' | 'CPP' | 'GO' | 'PYTHON' | 'PHP';\r\n\r\n// support for php multi-line strings is lacking\r\n// a good idea is to use a regex to exclude the\r\n// comments that are within multi-line strings\r\n```\r\n\r\n### [Options](index.ts#L12)\r\n\r\n```typescript\r\ntype Options = {\r\n  stringSensitive?: boolean;\r\n  stringLiterals?: string[];\r\n  exclude?: RegExp[];\r\n};\r\n```\r\n\r\n### [Cmtu Object](index.ts#L53)\r\n```ts\r\n// 1- methods exposed by any configured cmtu object\r\n// 2- return type of cmtu(...) and cmtu.stringSensitive(...)\r\n\r\n{\r\n  // returns a string with with its comments stripped\r\n  strip: (code: string) => string;\r\n\r\n  // returns an array of the stripped comments\r\n  extract: (code: string) => string[];\r\n\r\n  // returns a tuple [comment-stripped string, stripped comments]\r\n  magic: (code: string) => [string, string[]];\r\n}\r\n```\r\n",
    "fileName": "sample.md"
  }
]
